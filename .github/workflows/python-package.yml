name: Build and Publish

on:
  push:
    branches: [ "main" ]

jobs:
  # ------------------------------------------------------------------
  # 1) Build wheels for each (platform, python-version)
  # ------------------------------------------------------------------
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [ "3.10", "3.11", "3.12" ]
        include:
          - os: ubuntu-latest
            platform: linux_x86_64
          - os: ubuntu-latest
            platform: linux_arm64
          - os: windows-latest
            platform: windows_x86_64
          - os: macos-latest
            platform: macos_x86_64
          - os: macos-latest
            platform: macos_arm64
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build toml

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prune extra binaries (bash on all platforms)
        run: |
          if [[ "${{ matrix.platform }}" == linux_* ]]; then
            rm -rf src/icad_tone_detection/bin/macos_* src/icad_tone_detection/bin/windows_* || true
            if [[ "${{ matrix.platform }}" == "linux_x86_64" ]]; then
              rm -rf src/icad_tone_detection/bin/linux_arm64 || true
            else
              rm -rf src/icad_tone_detection/bin/linux_x86_64 || true
            fi
          elif [[ "${{ matrix.platform }}" == windows_* ]]; then
            rm -rf src/icad_tone_detection/bin/linux_* src/icad_tone_detection/bin/macos_* || true
          elif [[ "${{ matrix.platform }}" == macos_* ]]; then
            rm -rf src/icad_tone_detection/bin/windows_* src/icad_tone_detection/bin/linux_* || true
            if [[ "${{ matrix.platform }}" == "macos_x86_64" ]]; then
              rm -rf src/icad_tone_detection/bin/macos_arm64 || true
            else
              rm -rf src/icad_tone_detection/bin/macos_x86_64 || true
            fi
          fi
          # Make sure non-Windows binaries are executable
          find src/icad_tone_detection/bin -type f ! -name '*.exe' -exec chmod +x {} \; 2>/dev/null || true
        shell: bash  # Ensure we use bash on Windows, too

      - name: Build distributions (wheel + sdist)
        run: python -m build

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist/*
          if-no-files-found: error

      - name: Publish package via Trusted Publisher
        if: ${{ github.ref == 'refs/heads/main' && matrix.platform == 'linux_x86_64' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          repository-url: 'https://test.pypi.org/legacy/'
          # or the real PyPI: 'https://upload.pypi.org/legacy/'

  # ------------------------------------------------------------------
  # 2) Create a separate GitHub Release per OS/arch
  # ------------------------------------------------------------------
  release:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux_x86_64
            os: ubuntu-latest
          - platform: linux_arm64
            os: ubuntu-latest
          - platform: windows_x86_64
            os: windows-latest
          - platform: macos_x86_64
            os: macos-latest
          - platform: macos_arm64
            os: macos-latest
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Export version from build job
        run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

      # Download all 3 python-version artifacts for this platform:
      - name: Download artifacts (Py3.10)
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.platform }}-py3.10
          path: dist

      - name: Download artifacts (Py3.11)
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.platform }}-py3.11
          path: dist


      - name: Download artifacts (Py3.12)
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.platform }}-py3.12
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}-${{ matrix.platform }}
          name: Release v${{ env.VERSION }} for ${{ matrix.platform }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
