name: Build and Publish

on:
  push:
    branches: [ "main" ]

jobs:
  # ------------------------------------------------------------------
  # 1) Build wheels for each (platform, python-version)
  # ------------------------------------------------------------------
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # 5 platforms with a mapped 'os':
          - platform: linux_x86_64
            os: ubuntu-latest
          - platform: linux_arm64
            os: ubuntu-latest
          - platform: windows_x86_64
            os: windows-latest
          - platform: macos_x86_64
            os: macos-latest
          - platform: macos_arm64
            os: macos-latest
        python-version: ["3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write

    # Expose the version so the 'release' job can reference it as: needs.build.outputs.version
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build toml

      - name: Extract version
        id: get_version          # <--- Important to reference it
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prune extra binaries
        run: |
          if [[ "${{ matrix.platform }}" == linux_* ]]; then
            rm -rf src/icad_tone_detection/bin/macos_* src/icad_tone_detection/bin/windows_* || true
            if [[ "${{ matrix.platform }}" == "linux_x86_64" ]]; then
              rm -rf src/icad_tone_detection/bin/linux_arm64 || true
            else
              rm -rf src/icad_tone_detection/bin/linux_x86_64 || true
            fi
          elif [[ "${{ matrix.platform }}" == windows_* ]]; then
            rm -rf src/icad_tone_detection/bin/linux_* src/icad_tone_detection/bin/macos_* || true
          elif [[ "${{ matrix.platform }}" == macos_* ]]; then
            rm -rf src/icad_tone_detection/bin/windows_* src/icad_tone_detection/bin/linux_* || true
            if [[ "${{ matrix.platform }}" == "macos_x86_64" ]]; then
              rm -rf src/icad_tone_detection/bin/macos_arm64 || true
            else
              rm -rf src/icad_tone_detection/bin/macos_x86_64 || true
            fi
          fi
          # Make sure non-Windows binaries are executable
          find src/icad_tone_detection/bin -type f ! -name '*.exe' -exec chmod +x {} \; 2>/dev/null || true

      - name: Build distributions (wheel + sdist)
        run: python -m build

      # <-- Upload artifact BEFORE trying to publish, so we don't lose them if publish fails
      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist/*

      - name: Publish package via Trusted Publisher
        if: ${{ github.ref == 'refs/heads/main' && runner.os == 'Linux' && (matrix.python-version == '3.10' || matrix.python-version == '3.11' || matrix.python-version == '3.12') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          repository-url: 'https://test.pypi.org/legacy/'
          # or the real PyPI: 'https://upload.pypi.org/legacy/'

  # ------------------------------------------------------------------
  # 2) Create a separate GitHub Release per OS/arch
  # ------------------------------------------------------------------
  release:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux_x86_64
            os: ubuntu-latest
          - platform: linux_arm64
            os: ubuntu-latest
          - platform: windows_x86_64
            os: windows-latest
          - platform: macos_x86_64
            os: macos-latest
          - platform: macos_arm64
            os: macos-latest
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      # Put the version into an env var so we can reference in 'tag_name'
      - name: Export version from build job
        run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # Grab all python versions for this platform
          name: dist-${{ matrix.platform }}-py**
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}-${{ matrix.platform }}
          name: Release v${{ env.VERSION }} for ${{ matrix.platform }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
